// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Fitness-related fields
  height        Float?
  weight        Float?  // Monthly average weight used for meal tracking and calculations
  age           Int?
  gender        String?   // "male" or "female"
  fitnessGoals  String?
  activityLevel String?
  experienceLevel String? @default("beginner") // "beginner", "intermediate", "advanced"

  accounts      Account[]
  sessions      Session[]
  workouts      Workout[]
  workoutTemplates WorkoutTemplate[]
  workoutSessions WorkoutSession[]
  exercises     Exercise[]
  nutritionLogs NutritionLog[]
  preferences   UserPreference?
  foods         Food[]
  meals         Meal[]
  savedWorkoutStates SavedWorkoutState[]
  weightEntries WeightEntry[]
  schedules     Schedule[]
  scheduleTemplates ScheduleTemplate[]
  pushSubscriptions PushSubscription[]
  completedDays CompletedDay[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Fitness-related models
model WorkoutTemplate {
  id               String   @id @default(cuid())
  userId           String?  @map("user_id") // null for predefined templates
  name             String
  description      String?
  estimatedDuration Int     @default(30) // minutes
  category         String?  // e.g., "upper-body", "lower-body", "full-body"
  difficulty       String?  // "beginner", "intermediate", "advanced"
  isPublic         Boolean  @default(false)
  isPredefined     Boolean  @default(false)
  isAiGenerated    Boolean  @default(false) // flag to track AI-generated templates
  usageCount       Int      @default(0)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  user             User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises        WorkoutTemplateExercise[]
  workoutSessions  WorkoutSession[]

  @@map("workout_templates")
}

model Exercise {
  id          String   @id @default(cuid())
  name        String
  description String?
  instructions String?
  gifUrl      String?
  isPublic    Boolean  @default(false)
  isPredefined Boolean @default(false)
  userId      String?  @map("user_id") // null for predefined exercises
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user             User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateExercises WorkoutTemplateExercise[]
  sessionExercises  WorkoutSessionExercise[]

  // Relations to global entities
  bodyParts   ExerciseBodyPart[]
  equipments  ExerciseEquipment[]
  muscles     ExerciseMuscle[]

  @@map("exercises")
}

model BodyPart {
  id   String @id @default(cuid())
  name String @unique
  exercises ExerciseBodyPart[]
  @@map("body_parts")
}

model Equipment {
  id   String @id @default(cuid())
  name String @unique
  exercises ExerciseEquipment[]
  @@map("equipments")
}

model Muscle {
  id   String @id @default(cuid())
  name String @unique
  exercises ExerciseMuscle[]
  @@map("muscles")
}

// Join tables for many-to-many
model ExerciseBodyPart {
  id         String   @id @default(cuid())
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String   @map("exercise_id")
  bodyPart   BodyPart @relation(fields: [bodyPartId], references: [id], onDelete: Cascade)
  bodyPartId String   @map("body_part_id")
  @@unique([exerciseId, bodyPartId])
  @@map("exercise_body_parts")
}

model ExerciseEquipment {
  id         String   @id @default(cuid())
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String   @map("exercise_id")
  equipment  Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  equipmentId String  @map("equipment_id")
  @@unique([exerciseId, equipmentId])
  @@map("exercise_equipments")
}

model ExerciseMuscle {
  id         String   @id @default(cuid())
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String   @map("exercise_id")
  muscle     Muscle   @relation(fields: [muscleId], references: [id], onDelete: Cascade)
  muscleId   String   @map("muscle_id")
  isPrimary  Boolean  @default(false)
  @@unique([exerciseId, muscleId])
  @@map("exercise_muscles")
}

model WorkoutTemplateExercise {
  id               String  @id @default(cuid())
  workoutTemplateId String  @map("workout_template_id")
  exerciseId       String  @map("exercise_id")
  order            Int     @default(0)
  targetSets       Int     @default(3)
  targetReps       String  @default("8-12") // can be "8-12" or "30 seconds"
  targetType       String  @default("reps") // "reps" or "time"
  targetWeight     Float?  // optional target weight
  restTime         Int     @default(90) // seconds
  notes            String?

  workoutTemplate WorkoutTemplate @relation(fields: [workoutTemplateId], references: [id], onDelete: Cascade)
  exercise         Exercise        @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([workoutTemplateId, exerciseId])
  @@map("workout_template_exercises")
}

model WorkoutSession {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  workoutTemplateId String? @map("workout_template_id") // null for custom sessions
  name             String
  description      String?
  startTime        DateTime @default(now())
  endTime          DateTime?
  duration         Int?     // actual duration in seconds
  status           String   @default("active") // "active", "completed", "paused"
  performanceStatus String? // "completed", "unfinished", "perfect"
  completionRate   Float?   // percentage of workout completed (0-100)
  perfectionScore  Float?   // score for how well user performed (0-100)
  notes            String?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  user             User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutTemplate  WorkoutTemplate? @relation(fields: [workoutTemplateId], references: [id])
  exercises        WorkoutSessionExercise[]
  savedState       SavedWorkoutState?

  @@map("workout_sessions")
}

model WorkoutSessionExercise {
  id               String   @id @default(cuid())
  workoutSessionId String   @map("workout_session_id")
  exerciseId       String   @map("exercise_id")
  order            Int      @default(0)
  targetSets       Int      @default(3)
  targetReps       String   @default("8-12")
  targetType       String   @default("reps") // "reps" or "time"
  notes            String?
  completed        Boolean  @default(false)
  completedSets    Int      @default(0) // track how many sets were actually completed
  perfectionScore  Float?   // individual exercise performance score (0-100)
  createdAt        DateTime @default(now()) @map("created_at")

  workoutSession WorkoutSession @relation(fields: [workoutSessionId], references: [id], onDelete: Cascade)
  exercise       Exercise       @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  sets           ExerciseSet[]

  @@map("workout_session_exercises")
}

model ExerciseSet {
  id                    String   @id @default(cuid())
  workoutSessionExerciseId String @map("workout_session_exercise_id")
  setNumber             Int
  reps                  Int?
  weight                Float?
  duration              Int?     // for time-based exercises (seconds)
  completed             Boolean  @default(false)
  restTime              Int?     // actual rest time taken
  notes                 String?
  createdAt             DateTime @default(now()) @map("created_at")

  workoutSessionExercise WorkoutSessionExercise @relation(fields: [workoutSessionExerciseId], references: [id], onDelete: Cascade)

  @@unique([workoutSessionExerciseId, setNumber])
  @@map("exercise_sets")
}

// Model to save workout progress when user exits mid-workout
model SavedWorkoutState {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  workoutSessionId String   @unique @map("workout_session_id")
  currentExerciseIndex Int  @default(0)
  timer            Int      @default(0) // seconds
  exerciseTimer    Int      @default(0) // seconds for current exercise
  isTimerRunning   Boolean  @default(false)
  isResting        Boolean  @default(false)
  restTimer        Int      @default(0)
  lastSetData      Json?    // Store last set data (reps, weight) for quick access
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutSession   WorkoutSession @relation(fields: [workoutSessionId], references: [id], onDelete: Cascade)

  @@map("saved_workout_states")
}

model Workout {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  name        String
  description String?
  duration    Int      // minutes
  exercises   Json     // Store exercises as JSON - keeping for backward compatibility
  date        DateTime @default(now())
  createdAt   DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("workouts")
}

model NutritionLog {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  date      DateTime @default(now())
  meals     Json     // Store meals as JSON
  calories  Int
  protein   Float
  carbs     Float
  fat       Float
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("nutrition_logs")
}

// User preferences stored as JSON for flexibility
model UserPreference {
  userId     String   @id @map("user_id")
  workout    Json
  nutrition  Json
  app        Json
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Food {
  id          String   @id @default(cuid())
  name        String
  brand       String?
  calories    Float
  protein     Float
  carbs       Float
  fat         Float
  fiber       Float?
  sugar       Float?
  sodium      Float?
  servingSize Float    // in grams
  servingUnit String   @default("g")
  category    String?  // e.g., "protein", "vegetable", "fruit", etc.
  verified    Boolean  @default(false) // for user-added vs verified foods
  isPublic    Boolean  @default(false) // allow users to share their custom foods
  userId      String?  @map("user_id") // null for global foods, userId for custom foods
  usageCount  Int      @default(0) // track how many times this food is used
  createdAt   DateTime @default(now()) @map("created_at")

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  mealIngredients MealIngredient[]

  @@map("foods")
}

model Meal {
  id          String   @id @default(cuid())
  name        String
  description String?
  totalCalories Float
  totalProtein  Float
  totalCarbs    Float
  totalFat      Float
  totalFiber    Float?
  totalSugar    Float?
  totalSodium   Float?
  isPublic     Boolean @default(false)
  userId       String  @map("user_id")
  createdAt    DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  ingredients MealIngredient[]

  @@map("meals")
}

model MealIngredient {
  id        String  @id @default(cuid())
  mealId    String  @map("meal_id")
  foodId    String  @map("food_id")
  quantity  Float   // how many servings/units
  createdAt DateTime @default(now()) @map("created_at")

  meal Meal @relation(fields: [mealId], references: [id], onDelete: Cascade)
  food Food @relation(fields: [foodId], references: [id], onDelete: Cascade)

  @@map("meal_ingredients")
}

model WeightEntry {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  weight    Float    // weight in pounds or kg depending on user preference
  date      DateTime @default(now()) // when the weight was recorded
  notes     String?  // optional notes about the weigh-in
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@map("weight_entries")
}

// Schedule models
model Schedule {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  weekStart DateTime // Start of the week (Sunday)
  name      String?  // Optional name for the schedule
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items ScheduleItem[]

  @@unique([userId, weekStart])
  @@index([userId, weekStart])
  @@map("schedules")
}

model ScheduleItem {
  id          String   @id @default(cuid())
  scheduleId  String   @map("schedule_id")
  type        String   // "workout" | "meal"
  title       String
  description String?
  startTime   String   // HH:MM format
  endTime     String   // HH:MM format
  day         Int      // 0 = Sunday, 1 = Monday, etc.
  category    String?
  calories    Int?
  difficulty  String?
  duration    Int?     // in minutes
  isFromGenerator Boolean @default(false)
  generatorData Json?  // Original data from AI generator
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  schedule Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([scheduleId, day])
  @@map("schedule_items")
}

model ScheduleTemplate {
  id          String   @id @default(cuid())
  userId      String?  @map("user_id") // null for default templates
  name        String
  description String?
  isDefault   Boolean  @default(false)
  isPublic    Boolean  @default(false)
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user  User?                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  items ScheduleTemplateItem[]

  @@map("schedule_templates")
}

model ScheduleTemplateItem {
  id               String   @id @default(cuid())
  templateId       String   @map("template_id")
  type             String   // "workout" | "meal"
  title            String
  description      String?
  startTime        String   // HH:MM format
  endTime          String   // HH:MM format
  day              Int      // 0 = Sunday, 1 = Monday, etc.
  category         String?
  calories         Int?
  difficulty       String?
  duration         Int?     // in minutes
  createdAt        DateTime @default(now()) @map("created_at")

  template ScheduleTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId, day])
  @@map("schedule_template_items")
}

// Push notification subscription model
model PushSubscription {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  endpoint  String   @unique
  keys      Json     // Store p256dh and auth keys
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@index([userId])
  @@map("push_subscriptions")
}

// Track completed workout days
model CompletedDay {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  date      DateTime // The date that was completed (date only, time set to 00:00:00)
  status    String   @default("completed") // "completed", "in_progress"
  notes     String?  // Optional notes about the completion
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@map("completed_days")
}
